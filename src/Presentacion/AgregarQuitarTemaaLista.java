/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Presentacion;

import Logica.DtAlbum;
import Logica.DtLista;
import Logica.DtListaP;
import Logica.DtListaPD;
import Logica.DtTema;
import Logica.Fabrica;
import Logica.IcontArtista;
import Logica.IcontCliente;
import Logica.Particular;
import java.awt.*;
import java.io.File;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import static javax.xml.bind.DatatypeConverter.parseInteger;

public class AgregarQuitarTemaaLista extends javax.swing.JInternalFrame {

    private IcontCliente Cli;
    private IcontArtista Art;
    private String a, b;
    private ArrayList<DtListaP> listasp;
    private ArrayList<DtListaPD> listaspd;

    public AgregarQuitarTemaaLista() {
        initComponents();
        setTitle("AgregarQuitarTemaaLista");
        Fabrica f = Fabrica.getInstance();
        this.Cli = f.getCliente();
        this.Art = f.getArtista();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmb_Busqueda = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaTemas = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        cmb_Lista = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        PanelPadre = new javax.swing.JPanel();
        Album = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        TablaAlbum = new javax.swing.JTable();
        ListaPD = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        TablaListaPD = new javax.swing.JTable();
        ListaP = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        TablaListaP = new javax.swing.JTable();
        cmb_Lista1 = new javax.swing.JComboBox<>();

        setClosable(true);
        setIconifiable(true);
        setPreferredSize(new java.awt.Dimension(800, 632));

        cmb_Busqueda.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Album", "Lista Por Defecto", "Lista Particular" }));
        cmb_Busqueda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_BusquedaActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel1.setText("Selecione el tipo de busqueda: ");

        TablaTemas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Artista", "Album"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TablaTemas);

        jButton1.setText("Aceptar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancelar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jList2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList2MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jList2);

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel2.setText("Lista a modificar: ");

        cmb_Lista.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Por Defecto", "Particular" }));
        cmb_Lista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_ListaActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        jLabel3.setText("Temas: ");

        PanelPadre.setLayout(new java.awt.CardLayout());

        TablaAlbum.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Artista", "Nombre Album", "AÃ±o"
            }
        ));
        TablaAlbum.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaAlbumMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(TablaAlbum);

        javax.swing.GroupLayout AlbumLayout = new javax.swing.GroupLayout(Album);
        Album.setLayout(AlbumLayout);
        AlbumLayout.setHorizontalGroup(
            AlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 492, Short.MAX_VALUE)
            .addGroup(AlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE))
        );
        AlbumLayout.setVerticalGroup(
            AlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 286, Short.MAX_VALUE)
            .addGroup(AlbumLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE))
        );

        PanelPadre.add(Album, "Album");

        TablaListaPD.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombre", "Genero"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablaListaPD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaListaPDMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(TablaListaPD);

        javax.swing.GroupLayout ListaPDLayout = new javax.swing.GroupLayout(ListaPD);
        ListaPD.setLayout(ListaPDLayout);
        ListaPDLayout.setHorizontalGroup(
            ListaPDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 492, Short.MAX_VALUE)
            .addGroup(ListaPDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE))
        );
        ListaPDLayout.setVerticalGroup(
            ListaPDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 286, Short.MAX_VALUE)
            .addGroup(ListaPDLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE))
        );

        PanelPadre.add(ListaPD, "ListaPD");

        TablaListaP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cliente", "Nombre Lista"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        TablaListaP.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaListaPMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(TablaListaP);

        javax.swing.GroupLayout ListaPLayout = new javax.swing.GroupLayout(ListaP);
        ListaP.setLayout(ListaPLayout);
        ListaPLayout.setHorizontalGroup(
            ListaPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 492, Short.MAX_VALUE)
            .addGroup(ListaPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 492, Short.MAX_VALUE))
        );
        ListaPLayout.setVerticalGroup(
            ListaPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 286, Short.MAX_VALUE)
            .addGroup(ListaPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE))
        );

        PanelPadre.add(ListaP, "ListaP");

        cmb_Lista1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Agregar", "Quitar" }));
        cmb_Lista1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmb_Lista1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(206, 206, 206)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(219, 219, 219))
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmb_Lista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmb_Busqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmb_Lista1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(PanelPadre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(cmb_Lista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmb_Busqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PanelPadre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(cmb_Lista1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmb_BusquedaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_BusquedaActionPerformed
        DefaultTableModel modelo = new DefaultTableModel();
        CardLayout cl = (CardLayout) (PanelPadre.getLayout());
        String Busqueda = (String) cmb_Busqueda.getSelectedItem();
        if (Busqueda.equals("Album")) {
            cl.show(PanelPadre, "Album");
            ArrayList<DtAlbum> album = Art.ListarAlbum();
            modelo = (DefaultTableModel) TablaAlbum.getModel();
            modelo.setRowCount(0);
            for (int i = 0; i < album.size(); i++) {
                DtAlbum a = (DtAlbum) album.get(i);
                Object[] dat = {a.getNombreArtista(), a.getNombre(), a.getAnio()};
                modelo.addRow(dat);
            }
        }
        if (Busqueda.equals("Lista Por Defecto")) {
            cl.show(PanelPadre, "ListaPD");
            ArrayList<DtListaPD> listapd = Art.ListarListaPD();
            modelo = (DefaultTableModel) TablaListaPD.getModel();
            modelo.setRowCount(0);
            for (int i = 0; i < listapd.size(); i++) {
                DtListaPD lpd = (DtListaPD) listapd.get(i);
                Object[] dat = {lpd.getNombre(), lpd.getGenero()};
                modelo.addRow(dat);
            }
        }
        if (Busqueda.equals("Lista Particular")) {
            cl.show(PanelPadre, "ListaP");
            ArrayList<DtListaP> listap = Cli.ListarListaP();
            modelo = (DefaultTableModel) TablaListaP.getModel();
            modelo.setRowCount(0);
            for (int i = 0; i < listap.size(); i++) {
                DtListaP lp = (DtListaP) listap.get(i);
                if (!lp.isPrivada()){
                    Object[] dat = {lp.getUsuario(), lp.getNombre()};
                    modelo.addRow(dat);
                }
            }
        }

    }//GEN-LAST:event_cmb_BusquedaActionPerformed

    private void cmb_ListaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_ListaActionPerformed
        String texto = cmb_Lista.getSelectedItem().toString();
        if ("Particular".equals(texto)) {
            ArrayList<DtListaP> listap = Cli.ListarListaP();
            this.listasp = listap;
            DefaultListModel modelo = new DefaultListModel();
            for (int i = 0; i < listap.size(); i++) {
                DtListaP lp = (DtListaP) listap.get(i);
                modelo.addElement(lp.getNombre());
            }
            this.jList2.setModel(modelo);
        } else {

            ArrayList<DtListaPD> listapd = Cli.ListarListaPD();
            this.listaspd = listapd;
            DefaultListModel modelo = new DefaultListModel();
            for (int i = 0; i < listapd.size(); i++) {
                DtListaPD lpd = (DtListaPD) listapd.get(i);
                modelo.addElement(lpd.getNombre());
            }
            this.jList2.setModel(modelo);
        }


    }//GEN-LAST:event_cmb_ListaActionPerformed

    private void cmb_Lista1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmb_Lista1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmb_Lista1ActionPerformed

    private void TablaListaPMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaListaPMouseClicked
        DefaultTableModel modelo = (DefaultTableModel)TablaListaP.getModel();
        a = (String) modelo.getValueAt(TablaListaP.getSelectedRow(), 0);
        b = (String) modelo.getValueAt(TablaListaP.getSelectedRow(), 1);
        ArrayList<DtTema> tema = Cli.listarTemasListaP(a, b);
        modelo = (DefaultTableModel) TablaTemas.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i < tema.size(); i++) {
            DtTema t = (DtTema) tema.get(i);
            Object[] dat = {t.getNombre(), t.getArtista(), t.getAlbum()};
            modelo.addRow(dat);
        }
    }//GEN-LAST:event_TablaListaPMouseClicked

    private void TablaListaPDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaListaPDMouseClicked
        DefaultTableModel modelo = (DefaultTableModel)TablaListaPD.getModel();
        a = (String) modelo.getValueAt(TablaListaPD.getSelectedRow(), 0);
        b = (String) modelo.getValueAt(TablaListaPD.getSelectedRow(), 1);
        ArrayList<DtTema> tema = Art.listarTemasListaPD(a, b);
        modelo = (DefaultTableModel) TablaTemas.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i < tema.size(); i++) {
            DtTema t = (DtTema) tema.get(i);
            Object[] dat = {t.getNombre(), t.getArtista(), t.getAlbum()};
            modelo.addRow(dat);
        }
    }//GEN-LAST:event_TablaListaPDMouseClicked

    private void TablaAlbumMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaAlbumMouseClicked
        DefaultTableModel modelo = (DefaultTableModel)TablaAlbum.getModel();
        a = (String) modelo.getValueAt(TablaAlbum.getSelectedRow(), 0);
        b = (String) modelo.getValueAt(TablaAlbum.getSelectedRow(), 1);
        ArrayList<DtTema> tema = Art.listarTemasListaA(a, b);
        modelo = (DefaultTableModel) TablaTemas.getModel();
        modelo.setRowCount(0);
        for (int i = 0; i < tema.size(); i++) {
            DtTema t = (DtTema) tema.get(i);
            Object[] dat = {t.getNombre(), t.getArtista(), t.getAlbum()};
            modelo.addRow(dat);
        }
    }//GEN-LAST:event_TablaAlbumMouseClicked

    private void jList2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList2MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jList2MouseClicked


    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            if (cmb_Lista1.getSelectedItem().equals("Agregar")) {
                String texto = cmb_Lista.getSelectedItem().toString();
                if ("Particular".equals(texto)) {
                    int index = TablaTemas.getSelectedRow();
                    int index2 = jList2.getSelectedIndex();
                    if (index == -1 || index2 == -1) {
                        throw new Exception("Debe seleccionar una lista y un tema");
                    }else{
                    String nick, album, tema, cliente, lista;
                    tema = (String) TablaTemas.getValueAt(index, 0);
                    nick = (String) TablaTemas.getValueAt(index, 1);
                    album = (String) TablaTemas.getValueAt(index, 2);
                    cliente = this.listasp.get(index2).getUsuario();
                    lista = this.listasp.get(index2).getNombre();
                    this.Art.AgregarTemaListaC(nick, album, tema, cliente, lista);
                    throw new Exception("Tema agregado");}
                } else {
                    int index = TablaTemas.getSelectedRow();
                    int index2 = jList2.getSelectedIndex();
                    if (index == -1 || index2 == -1) {
                        throw new Exception("Debe seleccionar una lista y un tema");
                    }else{
                    String nick, album, tema, genero, lista;
                    tema = (String) TablaTemas.getValueAt(index, 0);
                    nick = (String) TablaTemas.getValueAt(index, 1);
                    album = (String) TablaTemas.getValueAt(index, 2);
                    genero = this.listaspd.get(index2).getGenero();
                    lista = this.listaspd.get(index2).getNombre();
                    this.Art.AgregarTemaListaG(nick, album, tema, genero, lista);
                    throw new Exception("Tema agregado");}
                }
            } else {
                String texto = cmb_Lista.getSelectedItem().toString();
                if ("Particular".equals(texto)) {
                    int index = TablaTemas.getSelectedRow();
                    int index2 = jList2.getSelectedIndex();
                    if (index == -1 || index2 == -1) {
                        throw new Exception("Debe seleccionar una lista y un tema");
                    }else{
                    String nick, album, tema, cliente, lista;
                    tema = (String) TablaTemas.getValueAt(index, 0);
                    nick = (String) TablaTemas.getValueAt(index, 1);
                    album = (String) TablaTemas.getValueAt(index, 2);
                    cliente = this.listasp.get(index2).getUsuario();
                    lista = this.listasp.get(index2).getNombre();
                    this.Art.BorrarTemaListaC(nick, album, tema, cliente, lista);
                    throw new Exception("Tema borrado");}
                } else {
                    int index = TablaTemas.getSelectedRow();
                    int index2 = jList2.getSelectedIndex();
                    if (index == -1 || index2 == -1) {
                        throw new Exception("Debe seleccionar una lista y un tema");
                    }else{
                    String nick, album, tema, genero, lista;
                    tema = (String) TablaTemas.getValueAt(index, 0);
                    nick = (String) TablaTemas.getValueAt(index, 1);
                    album = (String) TablaTemas.getValueAt(index, 2);
                    genero = this.listaspd.get(index2).getGenero();
                    lista = this.listaspd.get(index2).getNombre();
                    this.Art.BorrarTemaListaG(nick, album, tema, genero, lista);
                    throw new Exception("Tema borrado");}
                }
            }
        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public void centrar() {
        //este metodo devuelve el tamaÃÂ±o de la pantalla
        Dimension pantalla = this.getParent().getSize();
        //obtenemos el tamaÃÂ±o de la ventana
        Dimension ventana = this.getSize();
        //para centrar la ventana lo hacemos con el siguiente calculo
        int a = pantalla.width;
        int b = ventana.width;
        a = (a - b) / 2;
        int c = pantalla.height;
        int d = ventana.height;
        c = (c - d) / 2;
        this.setLocation(a, c);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Album;
    private javax.swing.JPanel ListaP;
    private javax.swing.JPanel ListaPD;
    private javax.swing.JPanel PanelPadre;
    private javax.swing.JTable TablaAlbum;
    private javax.swing.JTable TablaListaP;
    private javax.swing.JTable TablaListaPD;
    private javax.swing.JTable TablaTemas;
    private javax.swing.JComboBox<String> cmb_Busqueda;
    private javax.swing.JComboBox<String> cmb_Lista;
    private javax.swing.JComboBox<String> cmb_Lista1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<String> jList2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    // End of variables declaration//GEN-END:variables
}
